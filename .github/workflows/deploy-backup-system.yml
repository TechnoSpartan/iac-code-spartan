name: Deploy Backup System

on:
  push:
    branches: [main]
    paths:
      - 'codespartan/platform/scripts/**'
      - '.github/workflows/deploy-backup-system.yml'
  workflow_dispatch:

jobs:
  deploy-backup-system:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create scripts directory on VPS
        run: |
          ssh ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_SSH_HOST }} "mkdir -p /opt/codespartan/scripts"

      - name: Deploy backup script
        run: |
          scp codespartan/platform/scripts/backup.sh \
            ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_SSH_HOST }}:/opt/codespartan/scripts/backup.sh

      - name: Deploy restore script
        run: |
          scp codespartan/platform/scripts/restore.sh \
            ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_SSH_HOST }}:/opt/codespartan/scripts/restore.sh

      - name: Set script permissions
        run: |
          ssh ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_SSH_HOST }} << 'EOF'
            chmod +x /opt/codespartan/scripts/backup.sh
            chmod +x /opt/codespartan/scripts/restore.sh
            echo "âœ… Scripts deployed and made executable"
          EOF

      - name: Create backup directory
        run: |
          ssh ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_SSH_HOST }} << 'EOF'
            mkdir -p /opt/codespartan/backups
            echo "âœ… Backup directory created"
          EOF

      - name: Configure cron job for daily backups
        run: |
          ssh ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_SSH_HOST }} << 'EOF'
            # Remove existing backup cron job if it exists
            crontab -l 2>/dev/null | grep -v '/opt/codespartan/scripts/backup.sh' | crontab - || true

            # Add new cron job (daily at 3:00 AM)
            (crontab -l 2>/dev/null; echo "0 3 * * * /opt/codespartan/scripts/backup.sh >> /var/log/codespartan-backup.log 2>&1") | crontab -

            echo "âœ… Cron job configured: Daily backups at 3:00 AM"
            echo ""
            echo "Current crontab:"
            crontab -l
          EOF

      - name: Test backup script (dry run)
        run: |
          ssh ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_SSH_HOST }} << 'EOF'
            echo "Testing backup script..."

            # Run backup script
            /opt/codespartan/scripts/backup.sh

            # List created backups
            echo ""
            echo "Backups created:"
            ls -lh /opt/codespartan/backups/

            # Show backup info
            if [ -f /opt/codespartan/backups/backup-*.tar.gz ]; then
              latest_backup=$(ls -t /opt/codespartan/backups/backup-*.tar.gz | head -1)
              echo ""
              echo "Latest backup details:"
              echo "  File: ${latest_backup}"
              echo "  Size: $(du -h ${latest_backup} | cut -f1)"
            fi
          EOF

      - name: Cleanup SSH key
        if: always()
        run: rm -f ~/.ssh/id_rsa

      - name: Deployment summary
        run: |
          echo "âœ… Backup system deployed successfully!"
          echo ""
          echo "ðŸ“‹ Summary:"
          echo "  - backup.sh: /opt/codespartan/scripts/backup.sh"
          echo "  - restore.sh: /opt/codespartan/scripts/restore.sh"
          echo "  - Backup dir: /opt/codespartan/backups/"
          echo "  - Cron schedule: Daily at 3:00 AM"
          echo "  - Retention: 7 days local"
          echo ""
          echo "ðŸ“š Next steps:"
          echo "  1. Review backup logs: ssh root@VPS 'tail -f /var/log/codespartan-backup.log'"
          echo "  2. Test restore: ssh root@VPS '/opt/codespartan/scripts/restore.sh /opt/codespartan/backups/backup-YYYY-MM-DD.tar.gz'"
          echo "  3. Configure remote backup (optional): Edit backup.sh environment variables"
