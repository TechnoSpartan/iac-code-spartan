name: Deploy Cyberdyne API

on:
  workflow_dispatch:
  push:
    paths:
      - 'codespartan/apps/cyberdyne/backend/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout backend application repo
        uses: actions/checkout@v4
        with:
          repository: CodeSpartan/ms-nd-bko-truckworks
          token: ${{ secrets.GH_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/ms-nd-bko-truckworks:latest
            ghcr.io/${{ github.repository_owner }}/ms-nd-bko-truckworks:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Checkout IaC repo
        uses: actions/checkout@v4
        with:
          path: iac

      - name: Copy docker-compose to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "iac/codespartan/apps/cyberdyne/backend/docker-compose.yml"
          target: "/opt/codespartan/apps/cyberdyne/backend/"
          strip_components: 5

      - name: Deploy API on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail
            cd /opt/codespartan/apps/cyberdyne/backend

            DEPLOY_START=$(date +%s)

            # Ensure network exists
            docker network create web || true

            # Pull latest image
            echo "📦 Pulling latest Docker image..."
            docker compose pull

            # Deploy
            echo "🚀 Starting API container..."
            docker compose up -d

            # Health check
            echo "🔍 Running health checks..."
            if docker ps | grep -q truckworks-api; then
              echo "✅ Container is running"

              # Esperar a que el health check interno de Docker pase
              echo "⏳ Waiting for container to be healthy..."
              HEALTH_CHECK_ATTEMPTS=0
              MAX_ATTEMPTS=24

              while [ $HEALTH_CHECK_ATTEMPTS -lt $MAX_ATTEMPTS ]; do
                HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' truckworks-api 2>/dev/null || echo "unknown")
                
                if [ "$HEALTH_STATUS" = "healthy" ]; then
                  echo "✅ Health check passed"
                  
                  DEPLOY_END=$(date +%s)
                  DEPLOY_TIME=$((DEPLOY_END - DEPLOY_START))
                  echo "DEPLOY_TIME=${DEPLOY_TIME}" >> /tmp/deploy_metrics.txt
                  echo "DEPLOY_STATUS=success" >> /tmp/deploy_metrics.txt

                  echo "🧹 Cleaning up old images..."
                  docker image prune -f

                  echo "✨ API deployed successfully in ${DEPLOY_TIME}s!"
                  docker ps | grep truckworks-api
                  exit 0
                fi
                
                echo "⏳ Health status: $HEALTH_STATUS - waiting... ($((HEALTH_CHECK_ATTEMPTS + 1))/$MAX_ATTEMPTS)"
                HEALTH_CHECK_ATTEMPTS=$((HEALTH_CHECK_ATTEMPTS + 1))
                sleep 3
              done

              echo "❌ Health check failed after $((MAX_ATTEMPTS * 3)) seconds"
              echo "📋 Container logs:"
              docker logs --tail 50 truckworks-api
              
              echo "DEPLOY_STATUS=health_check_failed" >> /tmp/deploy_metrics.txt
              exit 1
            else
              echo "❌ Container failed to start"
              echo "DEPLOY_STATUS=container_failed" >> /tmp/deploy_metrics.txt
              exit 1
            fi

