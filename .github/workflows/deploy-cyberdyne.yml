name: Deploy Cyberdyne Systems

on:
  workflow_dispatch:
  push:
    paths:
      - 'codespartan/apps/cyberdyne/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout application repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.CYBERDYNE_APP_REPO }}
          token: ${{ secrets.GH_PAT }}
          path: app

      - name: Checkout IaC repo for docker-compose
        uses: actions/checkout@v4
        with:
          path: iac

      - name: Copy app files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "app/*"
          target: "/opt/codespartan/apps/cyberdyne/"
          strip_components: 1

      - name: Copy docker-compose from IaC repo
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "iac/codespartan/apps/cyberdyne/docker-compose.yml"
          target: "/opt/codespartan/apps/cyberdyne/"
          strip_components: 4

      - name: Deploy stack
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail
            cd /opt/codespartan/apps/cyberdyne

            DEPLOY_START=$(date +%s)

            # Verify docker-compose.yml exists
            echo "📋 Verifying docker-compose.yml..."
            if [ ! -f docker-compose.yml ]; then
              echo "❌ docker-compose.yml not found!"
              exit 1
            fi
            echo "✅ docker-compose.yml found"

            # Build and deploy
            echo "🏗️  Building Docker image..."
            docker compose build --no-cache
            
            echo "🚀 Starting container..."
            docker compose up -d

            # Health check
            echo "🔍 Running health checks..."
            if docker ps | grep -q cyberdyne-frontend; then
              echo "✅ Container is running"

              # Esperar a que el health check interno de Docker pase
              echo "⏳ Waiting for container to be healthy..."
              HEALTH_CHECK_ATTEMPTS=0
              MAX_ATTEMPTS=20
              
              while [ $HEALTH_CHECK_ATTEMPTS -lt $MAX_ATTEMPTS ]; do
                HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' cyberdyne-frontend 2>/dev/null || echo "unknown")
                
                if [ "$HEALTH_STATUS" = "healthy" ]; then
                  echo "✅ Health check passed"
                  
                  DEPLOY_END=$(date +%s)
                  DEPLOY_TIME=$((DEPLOY_END - DEPLOY_START))
                  echo "DEPLOY_TIME=${DEPLOY_TIME}" >> /tmp/deploy_metrics.txt
                  echo "DEPLOY_STATUS=success" >> /tmp/deploy_metrics.txt

                  echo "🧹 Cleaning up old images..."
                  docker image prune -f

                  echo "✨ Deployment completed successfully in ${DEPLOY_TIME}s!"
                  docker ps | grep cyberdyne
                  exit 0
                fi
                
                echo "⏳ Health status: $HEALTH_STATUS - waiting... ($((HEALTH_CHECK_ATTEMPTS + 1))/$MAX_ATTEMPTS)"
                HEALTH_CHECK_ATTEMPTS=$((HEALTH_CHECK_ATTEMPTS + 1))
                sleep 3
              done

              echo "❌ Health check failed after $((MAX_ATTEMPTS * 3)) seconds"
              echo "📋 Container logs:"
              docker logs --tail 50 cyberdyne-frontend
              
              echo "DEPLOY_STATUS=health_check_failed" >> /tmp/deploy_metrics.txt
              exit 1
            else
              echo "❌ Container failed to start"
              echo "DEPLOY_STATUS=container_failed" >> /tmp/deploy_metrics.txt
              exit 1
            fi

      - name: Check production URL
        if: success()
        run: |
          echo "🌐 Checking production URL..."
          
          # Wait a bit for proxy to update
          sleep 5
          
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://www.cyberdyne-systems.es)
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "✅ Production site is responding correctly (HTTP $HTTP_STATUS)"
            echo "status=$HTTP_STATUS" >> $GITHUB_OUTPUT
          else
            echo "❌ Production site returned HTTP $HTTP_STATUS"
            echo ""
            echo "⚠️  NOTE: Container is healthy but proxy returns 404"
            echo "This indicates a PROXY CONFIGURATION issue, not a container issue."
            echo ""
            echo "To fix, check the proxy configuration (Caddy/Traefik) on the VPS:"
            echo "  - Verify reverse proxy is pointing to localhost:3000"
            echo "  - Check proxy logs: journalctl -u caddy -n 50"
            echo "  - Verify domain configuration"
            echo ""
            echo "Container is working correctly. Issue is in the proxy layer."
            
            # Don't fail the deployment since the container is working
            echo "status=$HTTP_STATUS" >> $GITHUB_OUTPUT
          fi
