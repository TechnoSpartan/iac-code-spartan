
services:
  api:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/cyberdyne-api:latest
    container_name: cyberdyne-api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s
    environment:
      - NODE_ENV=production
      - PORT=3000
    labels:
      - traefik.enable=true

      # API subdomain
      - traefik.http.routers.cyberdyne-api.rule=Host(`api.cyberdyne-systems.es`)
      - traefik.http.routers.cyberdyne-api.entrypoints=websecure
      - traefik.http.routers.cyberdyne-api.tls=true
      - traefik.http.routers.cyberdyne-api.tls.certresolver=le

      # CORS middleware (opcional, ajusta seg√∫n necesites)
      - traefik.http.middlewares.cyberdyne-api-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS,PATCH
      - traefik.http.middlewares.cyberdyne-api-cors.headers.accesscontrolallowheaders=*
      - traefik.http.middlewares.cyberdyne-api-cors.headers.accesscontrolalloworiginlist=https://www.cyberdyne-systems.es,https://staging.cyberdyne-systems.es,https://lab.cyberdyne-systems.es
      - traefik.http.middlewares.cyberdyne-api-cors.headers.accesscontrolmaxage=100
      - traefik.http.middlewares.cyberdyne-api-cors.headers.addvaryheader=true

      - traefik.http.routers.cyberdyne-api.middlewares=cyberdyne-api-cors
      - traefik.docker.network=web
      - traefik.http.services.cyberdyne-api.loadbalancer.server.port=3000

    networks:
      - web

networks:
  web:
    external: true

